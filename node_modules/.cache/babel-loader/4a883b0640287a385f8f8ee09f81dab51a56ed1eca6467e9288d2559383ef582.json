{"ast":null,"code":"import * as XLSX from \"xlsx\";\nexport default function exportInvoiceExcel(invoiceData, selectedBuyer, grandTotal) {\n  if (!selectedBuyer) {\n    alert(\"Please select a buyer first!\");\n    return;\n  }\n  const today = new Date();\n  const formattedDate = today.toLocaleDateString('en-GB').replace(/\\//g, \"-\");\n  const exportData = invoiceData.map(item => {\n    const actualQty = parseFloat(item.qty) || 0;\n    const billedQty = parseFloat(item.billedQty) || 0;\n    const rate = parseFloat(item.rate) || 0;\n    const discountPercent = parseFloat(item.discount) || 0;\n    const grossAmount = billedQty * rate;\n    const netAmount = grossAmount * (1 - discountPercent / 100);\n    return {\n      \"Voucher Date\": formattedDate,\n      \"Voucher Type Name\": \"Sales\",\n      \"Voucher Number\": \"\",\n      // You can generate auto if you want\n      \"Ledger Name\": selectedBuyer.name,\n      \"Ledger Amount\": \"\",\n      // Item rows will keep Ledger Amount blank\n      \"Item Name\": item.name,\n      \"Actual Quantity\": actualQty,\n      \"Billed Quantity\": billedQty,\n      \"Item Rate\": rate,\n      \"Item Rate per\": \"PCS\",\n      \"Disc%\": discountPercent,\n      \"Item Amount\": netAmount.toFixed(2),\n      \"Change Mode\": \"Item Invoice\",\n      \"Buyer/Supplier - Address\": selectedBuyer.address || \"\",\n      \"Buyer/Supplier - Pincode\": selectedBuyer.pincode || \"\"\n    };\n  });\n\n  // ðŸ†• Add Ledger Row at end\n  exportData.push({\n    \"Voucher Date\": formattedDate,\n    \"Voucher Type Name\": \"Sales\",\n    \"Voucher Number\": \"\",\n    \"Ledger Name\": selectedBuyer.name,\n    \"Ledger Amount\": grandTotal.toFixed(2),\n    \"Item Name\": \"\",\n    \"Actual Quantity\": \"\",\n    \"Billed Quantity\": \"\",\n    \"Item Rate\": \"\",\n    \"Item Rate per\": \"\",\n    \"Disc%\": \"\",\n    \"Item Amount\": \"\",\n    \"Change Mode\": \"\",\n    \"Buyer/Supplier - Address\": selectedBuyer.address || \"\",\n    \"Buyer/Supplier - Pincode\": selectedBuyer.pincode || \"\"\n  });\n  const wb = XLSX.utils.book_new();\n  const ws = XLSX.utils.json_to_sheet(exportData, {\n    header: [\"Voucher Date\", \"Voucher Type Name\", \"Voucher Number\", \"Ledger Name\", \"Ledger Amount\", \"Item Name\", \"Actual Quantity\", \"Billed Quantity\", \"Item Rate\", \"Item Rate per\", \"Disc%\", \"Item Amount\", \"Change Mode\", \"Buyer/Supplier - Address\", \"Buyer/Supplier - Pincode\"]\n  });\n  XLSX.utils.book_append_sheet(wb, ws, \"Invoice\");\n  const fileName = `Invoice_${selectedBuyer.name}_${formattedDate}.xlsx`;\n  XLSX.writeFile(wb, fileName);\n}","map":{"version":3,"names":["XLSX","exportInvoiceExcel","invoiceData","selectedBuyer","grandTotal","alert","today","Date","formattedDate","toLocaleDateString","replace","exportData","map","item","actualQty","parseFloat","qty","billedQty","rate","discountPercent","discount","grossAmount","netAmount","name","toFixed","address","pincode","push","wb","utils","book_new","ws","json_to_sheet","header","book_append_sheet","fileName","writeFile"],"sources":["C:/Users/Jai Ayurved research/Documents/Projects/Projuect Supervisor BACKUP 28 APR/src/utils/exportInvoiceExcel.js"],"sourcesContent":["import * as XLSX from \"xlsx\";\r\n\r\nexport default function exportInvoiceExcel(invoiceData, selectedBuyer, grandTotal) {\r\n  if (!selectedBuyer) {\r\n    alert(\"Please select a buyer first!\");\r\n    return;\r\n  }\r\n\r\n  const today = new Date();\r\n  const formattedDate = today.toLocaleDateString('en-GB').replace(/\\//g, \"-\");\r\n\r\n  const exportData = invoiceData.map((item) => {\r\n    const actualQty = parseFloat(item.qty) || 0;\r\n    const billedQty = parseFloat(item.billedQty) || 0;\r\n    const rate = parseFloat(item.rate) || 0;\r\n    const discountPercent = parseFloat(item.discount) || 0;\r\n    const grossAmount = billedQty * rate;\r\n    const netAmount = grossAmount * (1 - discountPercent / 100);\r\n\r\n    return {\r\n      \"Voucher Date\": formattedDate,\r\n      \"Voucher Type Name\": \"Sales\",\r\n      \"Voucher Number\": \"\",  // You can generate auto if you want\r\n      \"Ledger Name\": selectedBuyer.name,\r\n      \"Ledger Amount\": \"\",  // Item rows will keep Ledger Amount blank\r\n      \"Item Name\": item.name,\r\n      \"Actual Quantity\": actualQty,\r\n      \"Billed Quantity\": billedQty,\r\n      \"Item Rate\": rate,\r\n      \"Item Rate per\": \"PCS\",\r\n      \"Disc%\": discountPercent,\r\n      \"Item Amount\": netAmount.toFixed(2),\r\n      \"Change Mode\": \"Item Invoice\",\r\n      \"Buyer/Supplier - Address\": selectedBuyer.address || \"\",\r\n      \"Buyer/Supplier - Pincode\": selectedBuyer.pincode || \"\",\r\n    };\r\n  });\r\n\r\n  // ðŸ†• Add Ledger Row at end\r\n  exportData.push({\r\n    \"Voucher Date\": formattedDate,\r\n    \"Voucher Type Name\": \"Sales\",\r\n    \"Voucher Number\": \"\",\r\n    \"Ledger Name\": selectedBuyer.name,\r\n    \"Ledger Amount\": grandTotal.toFixed(2),\r\n    \"Item Name\": \"\",\r\n    \"Actual Quantity\": \"\",\r\n    \"Billed Quantity\": \"\",\r\n    \"Item Rate\": \"\",\r\n    \"Item Rate per\": \"\",\r\n    \"Disc%\": \"\",\r\n    \"Item Amount\": \"\",\r\n    \"Change Mode\": \"\",\r\n    \"Buyer/Supplier - Address\": selectedBuyer.address || \"\",\r\n    \"Buyer/Supplier - Pincode\": selectedBuyer.pincode || \"\",\r\n  });\r\n\r\n  const wb = XLSX.utils.book_new();\r\n  const ws = XLSX.utils.json_to_sheet(exportData, { header: [\r\n    \"Voucher Date\",\r\n    \"Voucher Type Name\",\r\n    \"Voucher Number\",\r\n    \"Ledger Name\",\r\n    \"Ledger Amount\",\r\n    \"Item Name\",\r\n    \"Actual Quantity\",\r\n    \"Billed Quantity\",\r\n    \"Item Rate\",\r\n    \"Item Rate per\",\r\n    \"Disc%\",\r\n    \"Item Amount\",\r\n    \"Change Mode\",\r\n    \"Buyer/Supplier - Address\",\r\n    \"Buyer/Supplier - Pincode\"\r\n  ]});\r\n  XLSX.utils.book_append_sheet(wb, ws, \"Invoice\");\r\n\r\n  const fileName = `Invoice_${selectedBuyer.name}_${formattedDate}.xlsx`;\r\n  XLSX.writeFile(wb, fileName);\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}