{"ast":null,"code":"// src/utils/exportTallyExcel.js\nimport * as XLSX from \"xlsx\";\nimport { saveAs } from \"file-saver\";\nimport products from \"../data/products\"; // to get rates\n\nconst exportTallyExcel = cart => {\n  const today = new Date();\n  const formattedDate = today.toLocaleDateString(\"en-GB\"); // e.g., 25/04/2025\n\n  const findRate = itemName => {\n    const p = products.find(p => p.name === itemName);\n    return (p === null || p === void 0 ? void 0 : p.rate) || 1; // default rate = 1 if not found\n  };\n  const headers = [\"Voucher Date\", \"Voucher Type Name\", \"Item Name\", \"Billed Quantity\", \"Item Rate\", \"Item Amount\", \"Change Mode\", \"Batch No.\", \"MFG Date\", \"Expiry Date\"];\n  const dataRows = cart.flatMap(item => item.entries.map(entry => {\n    const qty = (entry.qty || 0) * (entry.ctn || 1);\n    const rate = findRate(item.name);\n    const amount = qty * rate;\n    return [formattedDate, \"Stock Journal\", item.name, qty, rate, amount, \"Use for Stock Journal\", entry.batch, entry.mfg, entry.exp];\n  }));\n  const worksheetData = [headers, ...dataRows];\n  const worksheet = XLSX.utils.aoa_to_sheet(worksheetData);\n  const workbook = XLSX.utils.book_new();\n  XLSX.utils.book_append_sheet(workbook, worksheet, \"TallyExport\");\n  const excelBuffer = XLSX.write(workbook, {\n    bookType: \"xlsx\",\n    type: \"array\"\n  });\n  const blob = new Blob([excelBuffer], {\n    type: \"application/octet-stream\"\n  });\n  saveAs(blob, `Tally_StockJournal_${Date.now()}.xlsx`);\n};\nexport default exportTallyExcel;","map":{"version":3,"names":["XLSX","saveAs","products","exportTallyExcel","cart","today","Date","formattedDate","toLocaleDateString","findRate","itemName","p","find","name","rate","headers","dataRows","flatMap","item","entries","map","entry","qty","ctn","amount","batch","mfg","exp","worksheetData","worksheet","utils","aoa_to_sheet","workbook","book_new","book_append_sheet","excelBuffer","write","bookType","type","blob","Blob","now"],"sources":["C:/Users/Jai Ayurved research/Documents/Projects/Projuect Supervisor/src/utils/exportTallyExcel.js"],"sourcesContent":["// src/utils/exportTallyExcel.js\r\nimport * as XLSX from \"xlsx\";\r\nimport { saveAs } from \"file-saver\";\r\nimport products from \"../data/products\"; // to get rates\r\n\r\nconst exportTallyExcel = (cart) => {\r\n  const today = new Date();\r\n  const formattedDate = today.toLocaleDateString(\"en-GB\"); // e.g., 25/04/2025\r\n\r\n  const findRate = (itemName) => {\r\n    const p = products.find(p => p.name === itemName);\r\n    return p?.rate || 1; // default rate = 1 if not found\r\n  };\r\n\r\n  const headers = [\r\n    \"Voucher Date\",\r\n    \"Voucher Type Name\",\r\n    \"Item Name\",\r\n    \"Billed Quantity\",\r\n    \"Item Rate\",\r\n    \"Item Amount\",\r\n    \"Change Mode\",\r\n    \"Batch No.\",\r\n    \"MFG Date\",\r\n    \"Expiry Date\"\r\n  ];\r\n\r\n  const dataRows = cart.flatMap(item =>\r\n    item.entries.map(entry => {\r\n      const qty = (entry.qty || 0) * (entry.ctn || 1);\r\n      const rate = findRate(item.name);\r\n      const amount = qty * rate;\r\n      return [\r\n        formattedDate,\r\n        \"Stock Journal\",\r\n        item.name,\r\n        qty,\r\n        rate,\r\n        amount,\r\n        \"Use for Stock Journal\",\r\n        entry.batch,\r\n        entry.mfg,\r\n        entry.exp\r\n      ];\r\n    })\r\n  );\r\n\r\n  const worksheetData = [headers, ...dataRows];\r\n  const worksheet = XLSX.utils.aoa_to_sheet(worksheetData);\r\n  const workbook = XLSX.utils.book_new();\r\n  XLSX.utils.book_append_sheet(workbook, worksheet, \"TallyExport\");\r\n\r\n  const excelBuffer = XLSX.write(workbook, { bookType: \"xlsx\", type: \"array\" });\r\n  const blob = new Blob([excelBuffer], { type: \"application/octet-stream\" });\r\n  saveAs(blob, `Tally_StockJournal_${Date.now()}.xlsx`);\r\n};\r\n\r\nexport default exportTallyExcel;\r\n"],"mappings":"AAAA;AACA,OAAO,KAAKA,IAAI,MAAM,MAAM;AAC5B,SAASC,MAAM,QAAQ,YAAY;AACnC,OAAOC,QAAQ,MAAM,kBAAkB,CAAC,CAAC;;AAEzC,MAAMC,gBAAgB,GAAIC,IAAI,IAAK;EACjC,MAAMC,KAAK,GAAG,IAAIC,IAAI,CAAC,CAAC;EACxB,MAAMC,aAAa,GAAGF,KAAK,CAACG,kBAAkB,CAAC,OAAO,CAAC,CAAC,CAAC;;EAEzD,MAAMC,QAAQ,GAAIC,QAAQ,IAAK;IAC7B,MAAMC,CAAC,GAAGT,QAAQ,CAACU,IAAI,CAACD,CAAC,IAAIA,CAAC,CAACE,IAAI,KAAKH,QAAQ,CAAC;IACjD,OAAO,CAAAC,CAAC,aAADA,CAAC,uBAADA,CAAC,CAAEG,IAAI,KAAI,CAAC,CAAC,CAAC;EACvB,CAAC;EAED,MAAMC,OAAO,GAAG,CACd,cAAc,EACd,mBAAmB,EACnB,WAAW,EACX,iBAAiB,EACjB,WAAW,EACX,aAAa,EACb,aAAa,EACb,WAAW,EACX,UAAU,EACV,aAAa,CACd;EAED,MAAMC,QAAQ,GAAGZ,IAAI,CAACa,OAAO,CAACC,IAAI,IAChCA,IAAI,CAACC,OAAO,CAACC,GAAG,CAACC,KAAK,IAAI;IACxB,MAAMC,GAAG,GAAG,CAACD,KAAK,CAACC,GAAG,IAAI,CAAC,KAAKD,KAAK,CAACE,GAAG,IAAI,CAAC,CAAC;IAC/C,MAAMT,IAAI,GAAGL,QAAQ,CAACS,IAAI,CAACL,IAAI,CAAC;IAChC,MAAMW,MAAM,GAAGF,GAAG,GAAGR,IAAI;IACzB,OAAO,CACLP,aAAa,EACb,eAAe,EACfW,IAAI,CAACL,IAAI,EACTS,GAAG,EACHR,IAAI,EACJU,MAAM,EACN,uBAAuB,EACvBH,KAAK,CAACI,KAAK,EACXJ,KAAK,CAACK,GAAG,EACTL,KAAK,CAACM,GAAG,CACV;EACH,CAAC,CACH,CAAC;EAED,MAAMC,aAAa,GAAG,CAACb,OAAO,EAAE,GAAGC,QAAQ,CAAC;EAC5C,MAAMa,SAAS,GAAG7B,IAAI,CAAC8B,KAAK,CAACC,YAAY,CAACH,aAAa,CAAC;EACxD,MAAMI,QAAQ,GAAGhC,IAAI,CAAC8B,KAAK,CAACG,QAAQ,CAAC,CAAC;EACtCjC,IAAI,CAAC8B,KAAK,CAACI,iBAAiB,CAACF,QAAQ,EAAEH,SAAS,EAAE,aAAa,CAAC;EAEhE,MAAMM,WAAW,GAAGnC,IAAI,CAACoC,KAAK,CAACJ,QAAQ,EAAE;IAAEK,QAAQ,EAAE,MAAM;IAAEC,IAAI,EAAE;EAAQ,CAAC,CAAC;EAC7E,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACL,WAAW,CAAC,EAAE;IAAEG,IAAI,EAAE;EAA2B,CAAC,CAAC;EAC1ErC,MAAM,CAACsC,IAAI,EAAE,sBAAsBjC,IAAI,CAACmC,GAAG,CAAC,CAAC,OAAO,CAAC;AACvD,CAAC;AAED,eAAetC,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}