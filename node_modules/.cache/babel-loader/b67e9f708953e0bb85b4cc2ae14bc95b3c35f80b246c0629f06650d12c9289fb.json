{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { setProductData } from \"../utils/getBatchDetails\";\nexport default function useProductFilter() {\n  _s();\n  const [products, setProducts] = useState([]);\n  const [filteredProducts, setFilteredProducts] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState(\"पाक\");\n  useEffect(() => {\n    setProductData(finalProducts); // 👈 Link live data to batch lookup\n  }, [finalProducts]);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const res = await fetch(\"https://script.google.com/macros/s/AKfycbyuBBpR3LjZftoWLmuJlABy4vex0CRSCweCq3MS8vh9klL7uTy1C3UO2Yfvx0eX6JE/exec?key=DPRTMNT54$\");\n        const data = await res.json();\n        const grouped = {};\n        data.forEach(row => {\n          var _row$name;\n          const key = (_row$name = row.name) === null || _row$name === void 0 ? void 0 : _row$name.trim();\n          if (!key) return;\n          if (!grouped[key]) {\n            grouped[key] = {\n              name: key,\n              category: row.Category || \"Uncategorized\",\n              MRP: row.MRP || \"\",\n              batches: []\n            };\n          }\n          grouped[key].batches.push({\n            batch: row.Batch || \"\",\n            mfg: toMMYYYY(row.mfgDate),\n            exp: toMMYYYY(row.expDate)\n          });\n        });\n        const finalProducts = Object.values(grouped);\n        setProducts(finalProducts);\n        setFilteredProducts(finalProducts); // default\n      } catch (err) {\n        console.error(\"❌ Fetch error:\", err);\n      }\n    };\n    fetchData();\n  }, []);\n  useEffect(() => {\n    const result = products.filter(p => {\n      if (search.trim()) return p.name.toLowerCase().includes(search.toLowerCase());\n      return p.category === selectedCategory;\n    });\n    setFilteredProducts(result);\n  }, [products, search, selectedCategory]);\n  return {\n    products,\n    filteredProducts,\n    search,\n    setSearch,\n    selectedCategory,\n    setSelectedCategory\n  };\n}\n_s(useProductFilter, \"A+3aUeOOZVDQXbWWaHC2Fz7X6eA=\");\nfunction toMMYYYY(isoDate) {\n  if (!isoDate) return \"\";\n  const d = new Date(isoDate);\n  if (isNaN(d)) return \"\";\n  return `${String(d.getMonth() + 1).padStart(2, \"0\")}-${d.getFullYear()}`;\n}","map":{"version":3,"names":["useState","useEffect","setProductData","useProductFilter","_s","products","setProducts","filteredProducts","setFilteredProducts","search","setSearch","selectedCategory","setSelectedCategory","finalProducts","fetchData","res","fetch","data","json","grouped","forEach","row","_row$name","key","name","trim","category","Category","MRP","batches","push","batch","Batch","mfg","toMMYYYY","mfgDate","exp","expDate","Object","values","err","console","error","result","filter","p","toLowerCase","includes","isoDate","d","Date","isNaN","String","getMonth","padStart","getFullYear"],"sources":["C:/Users/Jai Ayurved research/Documents/Projects/Projuect Supervisor/src/hooks/useProductFilter.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { setProductData } from \"../utils/getBatchDetails\";\r\n\r\nexport default function useProductFilter() {\r\n  const [products, setProducts] = useState([]);\r\n  const [filteredProducts, setFilteredProducts] = useState([]);\r\n  const [search, setSearch] = useState(\"\");\r\n  const [selectedCategory, setSelectedCategory] = useState(\"पाक\");\r\n\r\n\r\nuseEffect(() => {\r\n  setProductData(finalProducts); // 👈 Link live data to batch lookup\r\n}, [finalProducts]);\r\n\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const res = await fetch(\r\n          \"https://script.google.com/macros/s/AKfycbyuBBpR3LjZftoWLmuJlABy4vex0CRSCweCq3MS8vh9klL7uTy1C3UO2Yfvx0eX6JE/exec?key=DPRTMNT54$\"\r\n        );\r\n        const data = await res.json();\r\n\r\n        const grouped = {};\r\n\r\n        data.forEach((row) => {\r\n          const key = row.name?.trim();\r\n          if (!key) return;\r\n\r\n          if (!grouped[key]) {\r\n            grouped[key] = {\r\n              name: key,\r\n              category: row.Category || \"Uncategorized\",\r\n              MRP: row.MRP || \"\",\r\n              batches: [],\r\n            };\r\n          }\r\n\r\n          grouped[key].batches.push({\r\n            batch: row.Batch || \"\",\r\n            mfg: toMMYYYY(row.mfgDate),\r\n            exp: toMMYYYY(row.expDate)\r\n          });\r\n        });\r\n\r\n        const finalProducts = Object.values(grouped);\r\n        setProducts(finalProducts);\r\n        setFilteredProducts(finalProducts); // default\r\n      } catch (err) {\r\n        console.error(\"❌ Fetch error:\", err);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const result = products.filter((p) => {\r\n      if (search.trim()) return p.name.toLowerCase().includes(search.toLowerCase());\r\n      return p.category === selectedCategory;\r\n    });\r\n    setFilteredProducts(result);\r\n  }, [products, search, selectedCategory]);\r\n\r\n  return {\r\n    products,\r\n    filteredProducts,\r\n    search,\r\n    setSearch,\r\n    selectedCategory,\r\n    setSelectedCategory\r\n  };\r\n}\r\n\r\nfunction toMMYYYY(isoDate) {\r\n  if (!isoDate) return \"\";\r\n  const d = new Date(isoDate);\r\n  if (isNaN(d)) return \"\";\r\n  return `${String(d.getMonth() + 1).padStart(2, \"0\")}-${d.getFullYear()}`;\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}